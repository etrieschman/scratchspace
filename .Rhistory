## Chapter 2
install.packages('ISLR')
library(ISLR)
### Loaded packages
require(ISLR)
?ISLR
??ISLR
## Chapter 2
read.csv('college')
college
Auto
## Chapter 2
read.csv('college.csv')
getwd()
HOME+'/dev/scratchspace'
### variables
HOME <- '/Users/etriesch'
HOME+'/dev/scratchspace'
setwd(paste0(HOME,'/dev/scratchspace'))
getwd()
## Chapter 2
read.csv('/data/College.csv')
## Chapter 2
read.csv(paste0(getwd(),'/data/College.csv'))
## Chapter 2
college <- read.csv(paste0(getwd(),'/data/College.csv'))
fix(college)
college[1,]
college[,1]
townames(college) <- college[,1]
rownames(college) <- college[,1]
fix(college)
?fix
### Introduction to Statistical Learning exercises
### Installed Packages
install.packages('XQuartz')
install.packages(fix)
install.packages('fix')
R.Version()
college
college %>% View()
View(college)
install.packages('dplyr')
require(dplyr)
college <- college[,-1]
summary(college)
pairs(college[,1:10])
plot(college$Outstate, college$Private)
plot(college$Private, college$Outstate)
college$Private <- ifelse(college$Private == 'Yes', TRUE, FALSE)
plot(college$Private, college$Outstate)
?plot
## Chapter 2
college <- read.csv(paste0(getwd(),'/data/College.csv'))
rownames(college) <- college[,1]
college <- college[,-1]
college$Private <- as.factor(college$Private)
plot(college$Private, college$Outstate)
college$Elite <- college$Top10perc > 50
college$Elite
college$Elite <- as.factor(college$Elite)
college$Elite <- as.factor(college$Top10perc > 50)
summary(college$Elite)
with(college, plot(Outside, Elite))
with(college, plot(Outstate, Elite))
college$Elite <- as.factor(college$Top10perc > 50)
summary(college$Elite)
with(college, plot(Outstate, Elite))
View(college)
plot(college$Outstate, college$Private)
plot(college$Private, college$Outstate)
plot(college$Elite, college$Outstate)
with(college, plot(Elite, Outstate))
Auto
summary(Auto)
auto <- read.Table(Auto)
auto <- read.table(Auto)
read.table(Auto.data)
Auto
auto <- Auto
View(auto)
dim(auto)
class(Auto)
?lapply
lapply(auto, class())
lapply(auto, class
lapply(auto, class)
lapply(auto, class)
col_classes <- lapply(auto, class)
View(col_classes)
col_ranges <- lapply(auto, range)
dim(auto)
-dim(auto)[2]
col_ranges <- lapply(auto[,-dim(auto)[2]], range)
View(col_ranges)
col_ranges
col_ranges <- lapply(auto[,-dim(auto)[2]], min)
View(col_ranges)
col_ranges <- lapply(auto[,-dim(auto)[2]], range)
range(auto$weight)
require(MASS)
?Boston
Boston %>% View()
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
# Relative freq definition
n <- 10
coin_toss <- NULL
for (i in 1:n) {
coin_toss[i] <- sample(0:1, 1)
}
coin_toss
?data.frame
colnames(coin_toss) <- c('n', 'toss')
coin_toss <- NULL
colnames(coin_toss) <- c('n', 'toss')
coin_toss <- data.frame()
colnames(coin_toss) <- c('n', 'toss')
coin_toss <- data.frame(matrix(ncol=2))
colnames(coin_toss) <- c('n', 'toss')
for (i in 1:n) {
coin_toss[i] <- sample(0:1, 1)
}
coin_toss[i, 1] <- i
coin_toss[i, 2] <- sample(0:1, 1)
# Relative freq definition
n <- 10
coin_toss <- data.frame(matrix(ncol=2))
colnames(coin_toss) <- c('n', 'toss')
for (i in 1:n) {
coin_toss[i, 1] <- i
coin_toss[i, 2] <- sample(0:1, 1)
}
View(coin_toss)
# Relative freq definition
n <- 10
coin_toss <- data.frame()
for (i in 1:n) {
coin_toss[i] <- sample(0:1, 1)
}
# Relative freq definition
n <- 10
coin_toss <- data.frame()
for (i in 1:n) {
coin_toss[i] <- sample(0:1, 1)
}
coin_toss <- NULL
for (i in 1:n) {
coin_toss[i] <- sample(0:1, 1)
}
coin_toss <- dataframe(matrix(ncol=2), col.names=c('test', 'test'))
coin_toss <- data.frame(matrix(ncol=2), col.names=c('test', 'test'))
View(coin_toss)
coin_toss <- data.frame(matrix(ncol=2), colnames=c('test', 'a'))
View(coin_toss)
colnames(coin_toss) <- c('n', 'heads', 'pct_heads')
# Relative freq definition
n <- 10
coin_toss <- data.frame(matrix(ncol=3))
colnames(coin_toss) <- c('n', 'heads', 'pct_heads')
for (i in 1:n) {
coint_toss$n <- i
coin_toss$heads[i] <- sample(0:1, 1)
coin_toss$pct_heads <- cumsum(coin_toss$heads)
}
for (i in 1:n) {
coin_toss$n <- i
coin_toss$heads[i] <- sample(0:1, 1)
coin_toss$pct_heads <- cumsum(coin_toss$heads)
}
# Relative freq definition
n <- 10
coin_toss <- data.frame(matrix(ncol=3))
colnames(coin_toss) <- c('n', 'heads', 'pct_heads')
for (i in 1:n) {
coin_toss$n[i] <- i
coin_toss$heads[i] <- sample(0:1, 1)
coin_toss$pct_heads[i] <- cumsum(coin_toss$heads)
}
# Relative freq definition
n <- 10
coin_toss <- data.frame(matrix(ncol=3))
colnames(coin_toss) <- c('n', 'heads', 'pct_heads')
for (i in 1:n) {
coin_toss$n[i] <- i
coin_toss$heads[i] <- sample(0:1, 1)
# coin_toss$pct_heads[i] <- cumsum(coin_toss$heads)
}
# Relative freq definition
n <- 10
coin_toss <- data.frame(matrix(ncol=3))
colnames(coin_toss) <- c('n', 'heads', 'pct_heads')
for (i in 1:n) {
# coin_toss$n[i] <- i
coin_toss$heads[i] <- sample(0:1, 1)
# coin_toss$pct_heads[i] <- cumsum(coin_toss$heads)
}
# Relative freq definition
n <- 10
coin_toss <- data.frame(matrix(ncol=3))
colnames(coin_toss) <- c('n', 'heads', 'pct_heads')
View(coin_toss)
i <- 5
coin_toss$n[i] <- i
coin_toss$n[i]
coin_toss$n[i] <- i
# Relative freq definition
n <- 10
coin_toss <- data.frame(matrix(ncol=3))
colnames(coin_toss) <- c('n', 'heads', 'pct_heads')
for (i in 0:n) {
coin_toss$n[i] <- i
# coin_toss$heads[i] <- sample(0:1, 1)
# coin_toss$pct_heads[i] <- cumsum(coin_toss$heads)
}
0:n
# Relative freq definition
n <- 10
coin_toss_n <- NULL
coin_toss_heads <- NULL
coin_toss_pct_heads <- NULL
for (i in 1:n) {
coin_toss_n[i] <- i
coin_toss_heads[i] <- sample(0:1, 1)
coin_toss_pct_heads[i] <- cumsum(coin_toss$heads)
}
# Relative freq definition
n <- 10
coin_toss_n <- NULL
coin_toss_heads <- NULL
coin_toss_pct_heads <- NULL
for (i in 1:n) {
coin_toss_n[i] <- i
coin_toss_heads[i] <- sample(0:1, 1)
coin_toss_pct_heads[i] <- cumsum(coin_toss_heads)
}
# Relative freq definition
n <- 10
coin_toss_n <- NULL
coin_toss_heads <- NULL
for (i in 1:n) {
coin_toss_n[i] <- i
coin_toss_heads[i] <- sample(0:1, 1)
}
coin_toss_pct_heads <- cumsum(coin_toss_heads)
# Relative freq definition
n <- 10
coin_toss_n <- NULL
coin_toss_heads <- NULL
for (i in 1:n) {
coin_toss_n[i] <- i
coin_toss_heads[i] <- sample(0:1, 1)
}
coin_toss_pct_heads <- cumsum(coin_toss_heads) / coin_toss_n
plot(coin_toss_pct_heads)
?plot
require(ggplot)
require(ggplot2)
### Introduction to Statistical Learning exercises
### Installed Packages
install.packages('ggplot2')
require(ggplot2)
ggplot() + geom_line(x=coin_toss_pct_heads)
ggplot(aes(y=coin_toss_pct_heads, x=coin_toss_n) +
ggplot(aes(y=coin_toss_pct_heads, x=coin_toss_n)) +
geom_line()
ggplot(aes(y=coin_toss_pct_heads, x=coin_toss_n)) +
geom_line()
ggplot(aes(y=coin_toss_pct_heads, x=coin_toss_n)) +
geom_line()
coin_toss_df <- data.frame(coin_toss_n, coin_toss_pct_heads)
View(coin_toss_df)
# Relative freq definition
trials <- 10
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=heads, x=n)) +
geom_line()
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
# Relative freq definition
trials <- 100
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
# Relative freq definition
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
# Relative freq definition
trials <- 10000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
# Relative freq definition
trials <- 100000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
# Relative freq definition
trials <- 1000000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
# Relative freq definition
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
# Relative freq definition
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
# Relative freq definition
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
# Relative freq definition
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
trials <- 1000
n <- NULL
heads <- NULL
for (i in 1:trials) {
n[i] <- i
heads[i] <- sample(0:1, 1)
}
pct_heads <- cumsum(heads) / n
coin_toss_df <- data.frame(n, heads, pct_heads)
ggplot(data=coin_toss_df, aes(y=pct_heads, x=n)) +
geom_line()
